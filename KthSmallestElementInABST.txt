/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        PriorityQueue<Integer> heap = new PriorityQueue<>();
        traverseTree(root, heap);
        while(k != 1) {
            k--;
            heap.poll();
        }
        return heap.poll();
    }
    
    public void traverseTree(TreeNode root, PriorityQueue<Integer> heap) {
        if (root != null) {
            heap.add(root.val);
            traverseTree(root.left, heap);
            traverseTree(root.right, heap);
        }                
    }
}	// beats 5.69 % of java submissions;
